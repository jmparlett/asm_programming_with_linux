     1                                  section .data ;this is a comment F 
     2 00000000 48656C6C6F20576F72-     hi: db "Hello World!"
     2 00000009 6C6421             
     3                                  
     4                                  section .text ;text go here?
     5                                  
     6                                    global _start
     7                                  
     8                                  _start: ;this seems to be basically the main function
     9                                    ;program needs to go between the two nops
    10 00000000 90                        nop ;nop 1 
    11                                    ;***1***** mov demo
    12                                    ; mov ax, 067FEh;store hex to ax
    13                                    ; mov bx, ax; copy hex to bx
    14                                    ; mov cl, bh; store first byte of bx in low byte of cx
    15                                    ; mov ch, bl; store second byte of bx to high byte of cx
    16                                    ; xchg cl, ch; swap low and high of cx
    17                                    ;****1****
    18                                  
    19                                    ;*****2***** move by size and mem location demo
    20                                    ; mov al, [hi]
    21                                    ; mov [hi], byte 'G';puts a g at the beginning of hi
    22                                    ; mov [hi+5], byte '!'; replaces the sixth character in hi with a !
    23                                    ;*****2*****
    24                                  
    25                                    ;*****3***** flags demo
    26                                    ; mov eax, 0ffffffffh
    27                                    ; mov ebx, 02dh
    28                                    ; inc eax
    29                                    ; dec ebx
    30                                    ; nop ;nop 2
    31                                    ;*****3*****
    32                                  
    33                                  
    34                                    ;*****4***** Jump if zero demo
    35                                    ; mov eax, 5; run loop 5 times
    36                                    ; Jonathan: dec eax ;this is a label
    37                                      ; jnz Jonathan ; jump to label provided if result of last operation wasn't zero
    38                                    ;*****4***** Jump if zero demo
    39                                  
    40                                    
    41                                    ;*****5***** infinite loop
    42                                    ; mov eax, 5
    43                                    ; j:dec eax
    44                                      ; jmp j
    45                                    ;*****5***** infinite loop
    46                                  
    47                                  
    48                                    ;*****6***** 
    49                                    ; mov eax, 42
    50                                    ; neg eax
    51                                    ; add eax, 42
    52                                  
    53                                    ; not worth counting
    54                                    ; mov eax, 07fffffffh
    55                                    ; inc eax,
    56                                  
    57                                    ; xor eax, eax
    58                                    ; mov ax, -42
    59                                    ; mov ebx, eax
    60                                    ; xor eax, eax
    61                                    
    62                                    ; mov ax, -42
    63                                    ; movsx ebx, ax
    64                                  
    65                                  
    66                                    ;******7****** mul demo
    67                                    ; mov eax, 447 ;smaller than 16^3
    68                                    ; mov ebx, 1739;smaller then 16^3
    69                                    ; mul ebx  ;product wont overflow from a single reg since it will less then 16^6
    70                                    ; look in eax for val
    71                                  
    72                                    ; xor eax, eax
    73                                    ; xor ebx, ebx
    74                                    ; mov eax, 0ffffffffh ;16^8 will definetly overflow
    75                                    ; mov ebx, 03b72h ; < 16^5
    76                                    ; mul ebx; look in eax/edx
    77                                  
    78                                  
    79                                    ;******8****** div demo
    80 00000001 BB10000000                mov ebx, 010h
    81 00000006 B820000000                mov eax, 020h
    82 0000000B F7F3                      div ebx  ;look in eax
    83                                  
    84                                  
    85                                  
    86                                    section .bss ;this sections stores uninited data
