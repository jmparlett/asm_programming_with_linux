     1                                  section .data ;this is a comment F 
     2 00000000 48656C6C6F20576F72-     hi: db "Hello World!"
     2 00000009 6C6421             
     3 0000000C 31352C31322C362C30-     sums: dd "15,12,6,0,21,14,4,0,0,10"
     3 00000015 2C32312C31342C342C-
     3 0000001E 302C302C3130       
     4                                  sumslen equ $-sums; length
     5 00000024 61                      a: db "a"
     6 00000025 62                      b: db "b"
     7 00000026 616263                  abc: db "abc"
     8                                  
     9                                  section .text ;text go here?
    10                                  
    11                                    global _start
    12                                  
    13                                  _start: ;this seems to be basically the main function
    14                                    ;program needs to go between the two nops
    15 00000000 90                        nop ;nop 1 
    16                                    ;***1***** mov demo
    17                                    ; mov ax, 067FEh;store hex to ax
    18                                    ; mov bx, ax; copy hex to bx
    19                                    ; mov cl, bh; store first byte of bx in low byte of cx
    20                                    ; mov ch, bl; store second byte of bx to high byte of cx
    21                                    ; xchg cl, ch; swap low and high of cx
    22                                    ;****1****
    23                                  
    24                                    ;*****2***** move by size and mem location demo
    25                                    ; mov al, [hi]
    26                                    ; mov [hi], byte 'G';puts a g at the beginning of hi
    27                                    ; mov [hi+5], byte '!'; replaces the sixth character in hi with a !
    28                                    ;*****2*****
    29                                  
    30                                    ;*****3***** flags demo
    31                                    ; mov eax, 0ffffffffh
    32                                    ; mov ebx, 02dh
    33                                    ; inc eax
    34                                    ; dec ebx
    35                                    ; nop ;nop 2
    36                                    ;*****3*****
    37                                  
    38                                  
    39                                    ;*****4***** Jump if zero demo
    40                                    ; mov eax, 5; run loop 5 times
    41                                    ; Jonathan: dec eax ;this is a label
    42                                      ; jnz Jonathan ; jump to label provided if result of last operation wasn't zero
    43                                    ;*****4***** Jump if zero demo
    44                                  
    45                                    
    46                                    ;*****5***** infinite loop
    47                                    ; mov eax, 5
    48                                    ; j:dec eax
    49                                      ; jmp j
    50                                    ;*****5***** infinite loop
    51                                  
    52                                  
    53                                    ;*****6***** 
    54                                    ; mov eax, 42
    55                                    ; neg eax
    56                                    ; add eax, 42
    57                                  
    58                                    ; not worth counting
    59                                    ; mov eax, 07fffffffh
    60                                    ; inc eax,
    61                                  
    62                                    ; xor eax, eax
    63                                    ; mov ax, -42
    64                                    ; mov ebx, eax
    65                                    ; xor eax, eax
    66                                    
    67                                    ; mov ax, -42
    68                                    ; movsx ebx, ax
    69                                  
    70                                  
    71                                    ;******7****** mul demo
    72                                    ; mov eax, 447 ;smaller than 16^3
    73                                    ; mov ebx, 1739;smaller then 16^3
    74                                    ; mul ebx  ;product wont overflow from a single reg since it will be less then 16^6
    75                                    ; look in eax for val
    76                                  
    77                                    ; xor eax, eax
    78                                    ; xor ebx, ebx
    79                                    ; mov eax, 0ffffffffh ;16^8 will definetly overflow
    80                                    ; mov ebx, 03b72h ; < 16^5
    81                                    ; mul ebx; look in eax/edx
    82                                  
    83                                  
    84                                    ;******8****** div demo
    85                                    ; mov ebx, 010h
    86                                    ; mov eax, 020h
    87                                    ; div ebx  ;look in eax
    88                                  
    89                                  
    90 00000001 B804000000                mov eax, 4; sys_write
    91 00000006 BB01000000                mov ebx, 1; stdout
    92 0000000B B9[0C000000]              mov ecx, sums; sums addr
    93 00000010 BA18000000                mov edx, sumslen;
    94                                  
    95                                    section .bss ;this sections stores uninited data
