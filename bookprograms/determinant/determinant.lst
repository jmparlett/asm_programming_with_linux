     1                                  ;name determinant.asm
     2                                  ;description: calculates a 2x2 determinant given comma seperated arguments in a file.
     3                                  ; the arguments must all be <= 7 since calculations will be done using a lookup table.
     4                                  
     5                                  
     6                                  
     7                                  ;process
     8                                  
     9                                  ;Read
    10                                  ;read in arguments to buffer in format a,b,c,d where a,b,c,d <= 7
    11                                  ;set up registers for sys_read
    12                                  
    13                                  ;Calculate
    14                                  ;calculate a*d - (c*b)
    15                                  ;lookup row a/c column d/b
    16                                  ;store lookup results in register a, b
    17                                  ;calc (a-b)
    18                                  
    19                                  ;Write
    20                                  ;write result of calculation to stdout
    21                                  ;set up registers for sys_write
    22                                  
    23                                  ;Exit
    24                                  ;set up registers for sys_exit
    25                                  ;make sys_exit call
    26                                  
    27                                  SECTION .data
    28                                    ; Buff: dd "8,4,7,9"; hard coded for testing
    29                                    ; Bufflen equ $-Buff; 7 bytes to hold a,b,c,d
    30                                  SECTION .bss
    31                                    Bufflen equ 7; 7 bytes to hold a,b,c,d
    32 00000000 ??????????????            Buff: resb Bufflen; create buffer of length 8
    33                                    intstrbufflen equ 10; wont store more than ten chars
    34 00000007 <res Ah>                  intstrbuff: resb intstrbufflen; text buffer
    35                                    digcount: resd 0;number of digits we've converted so far
    36                                  
    37                                  SECTION .text
    38                                  
    39                                  global _start ;linker entry point
    40                                  
    41                                  ;--------------------------------------------------------------------
    42                                  ;Name: inttostring
    43                                  ;IN: the number to convert in eax
    44                                  ;RETURNS: converted number in intstrbuff, and length in intstrbufflen
    45                                  ;MODIFIES:
    46                                  ;CALLS:
    47                                  ;DESCRIPTION: converts given int to string and stores in the buffer intstrbuff
    48                                  
    49                                  inttostring:
    50 00000000 60                        pushad; save registers
    51                                  
    52                                    ;setup regs for conversion
    53 00000001 BE00000000                mov esi, 0; esi will count chars we've converted so far
    54 00000006 B90A000000                mov ecx,10; move divisor to ecx
    55 0000000B 31D2                      xor edx,edx;zero edx
    56                                  
    57                                    Convert:
    58 0000000D F7F1                      div ecx; divide val in eax by 10
    59 0000000F 83C230                    add edx, 48; convert to ascii char
    60 00000012 8996[07000000]            mov [intstrbuff + esi], edx;
    61 00000018 46                        inc esi;
    62 00000019 31D2                      xor edx,edx;zero edx
    63 0000001B 83F800                    cmp eax,0; we're done converting once val in edx is 0
    64 0000001E 75ED                      jne Convert; 
    65                                  
    66                                    ;setup regs to reverse the string
    67 00000020 B9[07000000]              mov ecx, intstrbuff; move starting addr of intstrbuff to ecx
    68 00000025 8D96[06000000]            lea edx, [intstrbuff-1+esi]; mov location of end of intstrbuff to edx
    69                                  
    70                                  
    71                                    ;left pointer = ecx
    72                                    ;right pointer = edx 
    73                                    ;temp = ebx
    74                                    ;ebx=[edx]
    75                                    ;[edx]=[ecx]
    76                                    ;[ecx]=ebx
    77                                    ;inc ecx
    78                                    ;dec edx
    79                                    ;xor ebx, ebx
    80                                    ;cmp ecx, edx
    81                                    ;jle Reverse
    82                                  
    83                                    Reverse:
    84                                    ;swap left and right
    85 0000002B 8A19                      mov bl, byte [ecx];store left char
    86 0000002D 8A3A                      mov bh, byte [edx];store right char
    87                                  
    88 0000002F 881A                      mov byte[edx], bl; move left char to right pointer location
    89 00000031 8839                      mov byte[ecx], bh; move right char to left pointer location
    90                                  
    91 00000033 41                        inc ecx; inc left pointer
    92 00000034 4A                        dec edx; dec right pointer
    93                                  
    94 00000035 31DB                      xor ebx,ebx; zero ebx
    95                                  
    96 00000037 39D1                      cmp ecx, edx; compare left and right pointers
    97 00000039 7EF0                      jle Reverse
    98                                  
    99 0000003B 8935[11000000]            mov [digcount], esi; store count of converted chars
   100 00000041 61                        popad; restore register vals
   101 00000042 C3                        ret; go home
   102                                  ;--------------------------------------------------------------------
   103                                  
   104                                  
   105                                  _start: 
   106                                    
   107 00000043 90                        nop; for the debugs
   108                                  
   109                                    Read:
   110 00000044 B803000000                  mov eax,3; specify sys_read
   111 00000049 BB00000000                  mov ebx,0; stdin
   112 0000004E BA07000000                  mov edx,Bufflen; read buffers size of chars from stdin
   113 00000053 B9[00000000]                mov ecx,Buff; store add of buff to ecx
   114 00000058 CD80                        int 80h; make sys_call
   115 0000005A 89C5                        mov ebp,eax;store sys_read return val (num of chars read)
   116 0000005C 83F800                      cmp eax,0; check for EOF
   117 0000005F 744B                        je Exit; if sys_read indicates EOF jump to exit
   118                                  ;
   119                                    ;setup registers for calculation step
   120                                  
   121                                    Calculate:
   122                                      ;buff scale = 2
   123                                      ;move a to eax
   124                                      ;move d to edx
   125                                      ;sub 48 from a and d
   126                                      ;imul eax, edx
   127                                      ;edx=a*d
   128                                      ;zero eax
   129                                      ;mov b to eax
   130                                      ;mov d to ebx
   131                                      ;sub 48 from eax and ebx
   132                                      ;imul eax and ebx
   133                                      ;sub edx,ebx
   134                                      
   135 00000061 A0[00000000]                mov al, byte [Buff + 2*0]; mov a to eax
   136 00000066 8A15[06000000]              mov dl, byte [Buff + 2*3]; mov d to edx
   137 0000006C 83E830                      sub eax, 48; convert a to int
   138 0000006F 83EA30                      sub edx, 48; convert d to int
   139 00000072 0FAFC2                      imul eax, edx; calc a*d store result in eax
   140                                  
   141 00000075 31D2                        xor edx,edx; zero edx so we can resuse 
   142                                  
   143 00000077 8A15[02000000]              mov dl, [Buff + 2*1]; mov b to eax
   144 0000007D 8A1D[04000000]              mov bl, [Buff + 2*2]; mov c to edx
   145 00000083 83EA30                      sub edx, 48; convert b to int
   146 00000086 83EB30                      sub ebx, 48; convert c to int
   147 00000089 0FAFDA                      imul ebx, edx; calc a*d store result in ebx
   148                                  
   149 0000008C 29D8                        sub eax,ebx; calc (a*d) -(b*c)
   150                                  
   151 0000008E E86DFFFFFF                  call inttostring; convert calculated val to string
   152                                  
   153                                    Write:
   154 00000093 B804000000                mov eax, 4; specify sys_write
   155 00000098 BB01000000                mov ebx, 1; specify stdout
   156 0000009D B9[07000000]              mov ecx, intstrbuff; intstrbuff pointer
   157 000000A2 8B15[11000000]            mov edx, [digcount]; specify num of bytes to write
   158 000000A8 CD80                      int 80h; make sys_call
   159 000000AA EB00                      jmp Exit; dip
   160                                  
   161                                    Exit:
   162 000000AC B801000000                mov eax, 1;specify sys_exit
   163 000000B1 BB00000000                mov ebx, 0; return code 0
   164 000000B6 CD80                      int 80h; make call
   165                                  
   166 000000B8 90                        nop; for the debugs
